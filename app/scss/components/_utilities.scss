/**
 * Positioning
 */
.clearfix:after {
    content: "";
    display: table;
    clear: both;
}

.right {
    float: right;
}

.left {
    float: left;
}

/**
 * Text Positioning
 */
.text-right {
    text-align: right;
}

.text-left {
    text-align: left;
}

/**
 * Text Colors
 */
.muted {
    color: color('grey', 500)
}

.text-theme {
    color: color($color-theme)
}

.background-theme {
    background-color: color($color-theme)
}

/**
 * Spacing Utilities
 */
.breathing {
    margin: 0 8px;
}

/**
 * Color Utilities
 */
@each $color, $shades in $colors {
    @each $tint, $value in $shades {

        // .text-red-300 -> this for each color and each tint
        .text-#{$color}-#{$tint} {
            color: color($color, $tint);
        }

        // .text-red -> this for each color with a 500 tint
        .text-#{$color} {
            color: color($color);
        }

        // .text-theme-300 -> this only for the theme, but with each tint
        .text-theme-#{$tint} {
            color: color($color-theme, $tint)
        }

        // .background-red-300 -> this for each color and each tint
        .background-#{$color}-#{$tint} {
            background-color: color($color, $tint);
        }

        // .background-red -> this for each color with a 500 tint
        .background-#{$color} {
            background-color: color($color);
        }

        // .background-theme-300 -> this only for the theme, but with each tint
        .background-theme-#{$tint} {
            background-color: color($color-theme, $tint)
        }
    }

    button {
        &.button {

            // .button-red -> this for each color
            @include m(#{$color}) {
                background-color: color($color, 800);

                &:focus,
                &:hover {
                    background-color: color($color, 600);
                }
            }

            // .button--theme -> for current theme color
            @include m(theme) {
                background-color: color($color-theme, 800);

                &:focus,
                &:hover {
                    background-color: color($color-theme, 600);
                }
            }
        }
    }
}


/**
 * A mixin which helps you to add depth to elements according to the Google Material Design spec:
 * http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality
 *
 * Please note that the values given in the specification cannot be used as is. To create the same visual experience
 * the blur parameter has to be doubled.
 *
 * Author: Florian Kutschera (@gefangenimnetz), Conceptboard GmbH (@conceptboardapp)
 *
 * Example usage:
 *
 * .card {
 *     width: 95px;
 *     height: 95px;
 *     background: #f4f4f4;
 *     -webkit-transition: all 250ms;
 *     -moz-transition: all 250ms;
 *     transition: all 250ms;
 *     .BoxShadowHelper(1);
 *     &:hover {
 *         .BoxShadowHelper(3);
 *         -webkit-transform: translateY(-5px);
 *         -moz-transform: translateY(-5px);
 *         transform: translateY(-5px);
 *     }
 * }
 *
 */

.shadow-1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12),
                0 1px 2px rgba(0, 0, 0, 0.24);
}

.shadow-2 {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16),
                0 3px 6px rgba(0, 0, 0, 0.23);
}

.shadow-3 {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19),
                0 6px 6px rgba(0, 0, 0, 0.23);
}

.shadow-4 {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
                0 10px 10px rgba(0, 0, 0, 0.22);
}

.shadow-5 {
    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.30),
                0 15px 12px rgba(0, 0, 0, 0.22);
}

@mixin imagePolyfill($size) {
    background-color: transparent;
    width: ($size + 0px) !important;
    height: ($size + 0px) !important;
    display: inline-block;
}

$from: 1;
$to: 1024;

@for $i from $from to ($to + 1) {
    .img-#{$i} {
        @include imagePolyfill($i);
    }
}

.avatar {
    background-color: color($color-theme, 50);
    padding: 3px;
    border-radius: 3px;
    border: 1px solid color($color-theme, 100);
}


$start: 1;
$end: 100;

@for $i from $start to $end {

    .padding-#{$i} {
        padding: #{$i}px;
    }

    .padding-bottom-#{$i} {
        padding-bottom: #{$i}px;
    }

    .padding-top-#{$i} {
        padding-top: #{$i}px;
    }

    .padding-left-#{$i} {
        padding-left: #{$i}px;
    }

    .padding-right-#{$i} {
        padding-right: #{$i}px;
    }

    .margin-#{$i} {
        margin: #{$i}px;
    }

    .margin-bottom-#{$i} {
        margin-bottom: #{$i}px;
    }

    .margin-left-#{$i} {
        margin-left: #{$i}px;
    }

    .margin-right-#{$i} {
        margin-right: #{$i}px;
    }

    .margin-top-#{$i} {
        margin-top: #{$i}px;
    }
}
